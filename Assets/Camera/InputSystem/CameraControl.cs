//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Camera/InputSystem/CameraControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraControl"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""4960c508-1815-4a79-ab9b-0c5910481bb6"",
            ""actions"": [
                {
                    ""name"": ""Drag"",
                    ""type"": ""Button"",
                    ""id"": ""db0edf0c-c3a9-4114-94c7-dcc8b691e907"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8c70c4ec-e307-43ac-922f-e24a2f1bb643"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""InvertVector2(invertX=false)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0ff5065d-bd10-4fc0-938b-4f52d0a35f27"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e686bcf9-1340-4d77-b608-3ffc62a700c4"",
                    ""path"": ""<Touchscreen>/touch1/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""DualTouch"",
                    ""id"": ""72775772-12e4-41c8-a4bb-67c40de6c929"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""c22c4563-668d-44fd-bdf0-e64b1c3cd55d"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""WebGL"",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""259105b1-b881-46f3-b208-48474075113f"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""WebGL"",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7b1c2e4e-290d-4b29-b311-73a50cb73c1d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MobileCamera"",
            ""id"": ""0fc9d3bd-7486-4c3a-8c10-993db6f96d2b"",
            ""actions"": [
                {
                    ""name"": ""SingleDrag"",
                    ""type"": ""Button"",
                    ""id"": ""d158e27d-87f4-4dda-bb13-e8145b75fc49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MultiDrag"",
                    ""type"": ""Button"",
                    ""id"": ""dd71d29b-db1e-45f9-9139-90618e6d0e25"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SingleLook"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c9f60e05-4220-4189-98ca-841bfa588f20"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""InvertVector2(invertX=false)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MultiLook"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7fc84763-6dfb-4a47-beae-7d0d439ca060"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""InvertVector2(invertX=false)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bb977a72-73d3-4b66-bb9c-837fa748e381"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SingleDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""838759c7-15f9-4c9e-99d6-53cccc788b9c"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MultiDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b284684e-d3cd-4277-b9dc-12a7f739d27e"",
                    ""path"": ""<Touchscreen>/touch0/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SingleLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""289f8f74-365f-4fc2-90b3-d18da3e23849"",
                    ""path"": ""<Touchscreen>/touch1/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MultiLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Drag = m_Camera.FindAction("Drag", throwIfNotFound: true);
        m_Camera_Look = m_Camera.FindAction("Look", throwIfNotFound: true);
        // MobileCamera
        m_MobileCamera = asset.FindActionMap("MobileCamera", throwIfNotFound: true);
        m_MobileCamera_SingleDrag = m_MobileCamera.FindAction("SingleDrag", throwIfNotFound: true);
        m_MobileCamera_MultiDrag = m_MobileCamera.FindAction("MultiDrag", throwIfNotFound: true);
        m_MobileCamera_SingleLook = m_MobileCamera.FindAction("SingleLook", throwIfNotFound: true);
        m_MobileCamera_MultiLook = m_MobileCamera.FindAction("MultiLook", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Drag;
    private readonly InputAction m_Camera_Look;
    public struct CameraActions
    {
        private @CameraControl m_Wrapper;
        public CameraActions(@CameraControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drag => m_Wrapper.m_Camera_Drag;
        public InputAction @Look => m_Wrapper.m_Camera_Look;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Drag.started += instance.OnDrag;
            @Drag.performed += instance.OnDrag;
            @Drag.canceled += instance.OnDrag;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Drag.started -= instance.OnDrag;
            @Drag.performed -= instance.OnDrag;
            @Drag.canceled -= instance.OnDrag;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // MobileCamera
    private readonly InputActionMap m_MobileCamera;
    private List<IMobileCameraActions> m_MobileCameraActionsCallbackInterfaces = new List<IMobileCameraActions>();
    private readonly InputAction m_MobileCamera_SingleDrag;
    private readonly InputAction m_MobileCamera_MultiDrag;
    private readonly InputAction m_MobileCamera_SingleLook;
    private readonly InputAction m_MobileCamera_MultiLook;
    public struct MobileCameraActions
    {
        private @CameraControl m_Wrapper;
        public MobileCameraActions(@CameraControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @SingleDrag => m_Wrapper.m_MobileCamera_SingleDrag;
        public InputAction @MultiDrag => m_Wrapper.m_MobileCamera_MultiDrag;
        public InputAction @SingleLook => m_Wrapper.m_MobileCamera_SingleLook;
        public InputAction @MultiLook => m_Wrapper.m_MobileCamera_MultiLook;
        public InputActionMap Get() { return m_Wrapper.m_MobileCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MobileCameraActions set) { return set.Get(); }
        public void AddCallbacks(IMobileCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_MobileCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MobileCameraActionsCallbackInterfaces.Add(instance);
            @SingleDrag.started += instance.OnSingleDrag;
            @SingleDrag.performed += instance.OnSingleDrag;
            @SingleDrag.canceled += instance.OnSingleDrag;
            @MultiDrag.started += instance.OnMultiDrag;
            @MultiDrag.performed += instance.OnMultiDrag;
            @MultiDrag.canceled += instance.OnMultiDrag;
            @SingleLook.started += instance.OnSingleLook;
            @SingleLook.performed += instance.OnSingleLook;
            @SingleLook.canceled += instance.OnSingleLook;
            @MultiLook.started += instance.OnMultiLook;
            @MultiLook.performed += instance.OnMultiLook;
            @MultiLook.canceled += instance.OnMultiLook;
        }

        private void UnregisterCallbacks(IMobileCameraActions instance)
        {
            @SingleDrag.started -= instance.OnSingleDrag;
            @SingleDrag.performed -= instance.OnSingleDrag;
            @SingleDrag.canceled -= instance.OnSingleDrag;
            @MultiDrag.started -= instance.OnMultiDrag;
            @MultiDrag.performed -= instance.OnMultiDrag;
            @MultiDrag.canceled -= instance.OnMultiDrag;
            @SingleLook.started -= instance.OnSingleLook;
            @SingleLook.performed -= instance.OnSingleLook;
            @SingleLook.canceled -= instance.OnSingleLook;
            @MultiLook.started -= instance.OnMultiLook;
            @MultiLook.performed -= instance.OnMultiLook;
            @MultiLook.canceled -= instance.OnMultiLook;
        }

        public void RemoveCallbacks(IMobileCameraActions instance)
        {
            if (m_Wrapper.m_MobileCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMobileCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_MobileCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MobileCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MobileCameraActions @MobileCamera => new MobileCameraActions(this);
    public interface ICameraActions
    {
        void OnDrag(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IMobileCameraActions
    {
        void OnSingleDrag(InputAction.CallbackContext context);
        void OnMultiDrag(InputAction.CallbackContext context);
        void OnSingleLook(InputAction.CallbackContext context);
        void OnMultiLook(InputAction.CallbackContext context);
    }
}
